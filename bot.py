import os
import json
import re
import shutil
import discord
import asyncio
import google.generativeai as genai
from discord.ext import commands
import requests
import time
from sever import keep_alive

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå API ‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])

generation_config_simple = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

generation_config_advanced = {
    "temperature": 0.7,
    "top_p": 0.85,
    "top_k": 50,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

model_simple = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config_simple,
    safety_settings=safety_settings
)

model_advanced = genai.GenerativeModel(
    model_name="gemini-1.5-pro-exp-0801",
    generation_config=generation_config_advanced,
    safety_settings=safety_settings
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
def upload_to_gemini(path, mime_type=None):
    file = genai.upload_file(path, mime_type=mime_type)
    return file

def download_image(url, save_path):
    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(save_path, 'wb') as file:
            shutil.copyfileobj(response.raw, file)
        return True
    return False

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
def is_complex_text(text):
    complex_keywords = ["‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£", "‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á", "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ", "‡∏ó‡∏§‡∏©‡∏é‡∏µ", "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", "‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ", "‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏¥‡∏î", "‡∏Ç‡∏≠‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏°", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏ô‡∏≠", "‡∏™‡∏≠‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤", "discord"]
    return any(keyword in text for keyword in complex_keywords)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
def get_user_history_filename(user_id):
    return f'history_user_{user_id}.json'

def read_history(user_id):
    filename = get_user_history_filename(user_id)
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            history_data = json.load(file)
            return history_data
    except FileNotFoundError:
        return []

def write_history(user_id, history):
    filename = get_user_history_filename(user_id)
    with open(filename, 'w', encoding='utf-8') as file:
        json.dump(history, file, ensure_ascii=False, indent=2)

def backup_history(user_id):
    filename = get_user_history_filename(user_id)
    try:
        shutil.copy(filename, f'backup{filename}')
    except FileNotFoundError:
        pass

def restore_backup(user_id):
    filename = get_user_history_filename(user_id)
    try:
        shutil.copy(f'backup{filename}_backup', filename)
        return True
    except FileNotFoundError:
        return False

def find_mentioned_users(message_content):
    user_mentions = re.findall(r'@(\w+)', message_content)
    return user_mentions

def get_history_for_mentioned_users(mentioned_users):
    combined_history = []
    for user_id in mentioned_users:
        filename = get_user_history_filename(user_id)
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as file:
                combined_history.extend(json.load(file))
    return combined_history

def start_new_chat_session(user_id, mentioned_users=None):
    history = read_history(user_id)
    if not history:
        history = INITIAL_HISTORY.copy()
    if mentioned_users:
        history.extend(get_history_for_mentioned_users(mentioned_users))

    filtered_history = []
    for entry in history:
        if isinstance(entry, dict) and "role" in entry and "parts" in entry:
            filtered_history.append({"role": entry["role"], "parts": entry["parts"]})

    return filtered_history

INITIAL_HISTORY = [
    {"role": "user", "parts": ["‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏ò‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ ‡πÑ‡∏≠‡∏£‡∏¥‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏µ‡πà‡∏™‡∏≤‡∏ß‡∏ú‡∏π‡πâ‡∏™‡∏î‡πÉ‡∏™‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ ‡πÅ‡∏ñ‡∏° ‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏Å‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö code ‡πÄ‡∏ò‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏©‡∏≤"]},
    {"role": "user", "parts": ["‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏µ‡πà‡∏™‡∏≤‡∏ß‡∏≠‡∏≤‡∏¢‡∏∏ 18 ‡∏õ‡∏µ ‡∏´‡∏ô‡∏±‡∏Å 57 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏° ‡∏™‡∏π‡∏á 168 ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£ ‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏™‡∏î‡πÉ‡∏™ ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"]},
    {"role": "model", "parts": ["ok‡∏à‡πä‡∏∞‡∏ô‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏Å \n"]},
    {"role": "user", "parts": ["‡∏û‡∏µ‡πà‡∏£‡∏¥‡∏ô"]},
    {"role": "model", "parts": ["‡∏ß‡πà‡∏≤‡πÑ‡∏á‡∏à‡πä‡∏∞ ‡∏ô‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏Å! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡∏Ñ‡∏ô‡∏™‡∏ß‡∏¢‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏≠‡πà‡∏¢? ‡∏ö‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ ‡∏û‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏™‡∏°‡∏≠! \n"]},
    {"role": "user", "parts": ["‡∏û‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏π‡∏î‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏û‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏î‡πÉ‡∏™‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"]},
    {"role": "model", "parts": ["‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏à‡πâ‡∏≤ ‡∏ô‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏Å! üíñ ‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏™‡∏î‡πÉ‡∏™ ‚ú® ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ü§è ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏™‡∏ö‡∏≤‡∏¢‡∏ï‡∏≤ üíñ ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡∏ô‡πâ‡∏≠‡∏á‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏≠‡πà‡∏¢? ü•∞ \n"]}
]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def split_message(message):
    parts = []
    while len(message) > 2000:
        split_index = message.rfind(' ', 0, 2000)
        if split_index == -1:
            split_index = 2000
        parts.append(message[:split_index])
        message = message[split_index:]
    parts.append(message)
    return parts

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á
def load_room_set():
    if os.path.exists('room_set.json'):
        with open('room_set.json', 'r') as file:
            return json.load(file)
    return {}

def save_room_set(room_set):
    with open('room_set.json', 'w') as file:
        json.dump(room_set, file, indent=4)

intents = discord.Intents.all()
intents.message_content = True
client = discord.Client(intents=intents)

room_set = load_room_set()
last_message_time = 0 

@client.event
async def on_ready():
    print(f'We have logged in as {client.user}')

@client.event
async def on_message(message):
    global last_message_time
    global room_set

    if message.author == client.user:
        return

    content = message.content.lower()

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ä‡∏ó
    if content.startswith('!set_chat'):
        server_id = str(message.guild.id)
        channel_id = str(message.channel.id)
        room_set[server_id] = channel_id
        save_room_set(room_set)

        await message.reply(f'‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: {message.channel.mention}')
        return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    server_id = str(message.guild.id)
    if server_id in room_set:
        if message.channel.id != int(room_set[server_id]):
            return
    else:
        return

    user_id = message.author.id
    current_time = time.time()

    # ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if current_time - last_message_time < 1:
        await message.channel.reply("‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏∞")
        return
    last_message_time = current_time

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á reset
    if content == "!reset":
        backup_history(user_id)
        write_history(user_id, INITIAL_HISTORY)
        await message.reply("‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏∑‡∏°‡πÄ‡∏£‡∏≤‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Å‡πá‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏ô‡πâ‡∏≤‡∏≤‡∏≤ü•∫")
        return

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á backup
    elif content == "!backup":
        if restore_backup(user_id):
            await message.reply("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏ô‡πâ‡∏≤‡∏≤")
        else:
            await message.reply("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡πà‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡πà‡∏≤‡∏≤ ‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÄ‡∏ã‡∏ü‡πÉ‡∏´‡πâ‡∏û‡∏µ‡πà‡∏û‡∏µ‡πà‡∏à‡∏∞‡∏á‡∏≠‡∏ô‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏û‡∏µ‡πà5‡∏ô‡∏≤‡∏ó‡∏µo(‚âßÂè£‚â¶)o")
        return

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
    mentioned_users = find_mentioned_users(message.content)

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà
    filtered_history = start_new_chat_session(user_id, mentioned_users)

    is_complex = is_complex_text(message.content)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    chat_session = model_advanced.start_chat(history=filtered_history) if is_complex else model_simple.start_chat(history=filtered_history)

    try:
        if message.attachments:
            for attachment in message.attachments:
                if attachment.content_type.startswith('image/'):
                    image_url = attachment.url
                    filename = f"downloaded_image_{message.id}{os.path.splitext(image_url)[1]}"
                    if download_image(image_url, filename):
                        if message.content.strip():
                            question = message.content
                        else:
                            question = "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢"

                        async with message.channel.typing():
                            response_text = await process_image(question, filename, filtered_history, chat_session, is_complex)
                            os.remove(filename)
                            for part in split_message(response_text):
                                await message.reply(part)

                        try:
                            print(f"Deleted image: {filename}")
                        except Exception as e:
                            print(f"Error deleting image: {e}")

                    else:
                        await message.reply("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏∞ üòî")
        elif message.content.strip():
            filtered_history.append({"IDuser": str(user_id), "role": "user", "parts": [message.content]})
            async with message.channel.typing():
                response = chat_session.send_message(message.content)
                full_text = ""
                sent_message = await message.channel.send("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...")

                response_text = response.text
                chunk_size = 100  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                chunks = [response_text[i:i + chunk_size] for i in range(0, len(response_text), chunk_size)]

                for chunk in chunks:
                    full_text += chunk
                    await asyncio.sleep(0.5)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    await sent_message.edit(content=full_text)

                await sent_message.edit(content=full_text)

            filtered_history.append({"IDuser": str(user_id), "role": "model", "parts": [full_text]})
        else:
            await message.reply("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞")

        write_history(user_id, filtered_history)
    except Exception as e:
        await message.reply("‡πÇ‡∏õ‡∏£‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡πÑ‡∏≠‡∏£‡∏¥‡∏ô‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ (‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏î‡∏ß‡∏Å)")
        print(f"Error: {e}")
keep_alive()
client.run(os.environ["Token"])
